"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var QUnit = require("steal-qunit");

var StacheElement = require("./can-stache-element");

var type = require("can-type");

var _require = require("can-observable-bindings"),
    fromAttribute = _require.fromAttribute;

var canReflectDeps = require("can-reflect-dependencies");

var dev = require("can-test-helpers").dev;

var testHelpers = require("../test/helpers");

var browserSupports = testHelpers.browserSupports;
var fixture;
QUnit.module("can-stache-element - mixin-bind-behaviour", {
  beforeEach: function beforeEach() {
    fixture = document.querySelector("#qunit-fixture");
  }
});

if (browserSupports.customElements) {
  QUnit.test("can set attribute from properties", function (assert) {
    var BasicBindingsElement =
    /*#__PURE__*/
    function (_StacheElement) {
      _inherits(BasicBindingsElement, _StacheElement);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(BasicBindingsElement).apply(this, arguments));
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{fname}} {{lname}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            fname: {
              type: type.maybeConvert(String),
              bind: fromAttribute
            },
            lname: {
              type: type.maybeConvert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("set-attribute", BasicBindingsElement);
    var el = document.createElement('set-attribute');
    fixture.appendChild(el);
    assert.equal(el.getAttribute('fname'), undefined, 'We have not initialized the attribute');
    assert.equal(el.fname, undefined, 'We have not initialized the property');
    el.setAttribute('fname', 'Justin');
    assert.equal(el.fname, 'Justin', 'We have set the property from the attribute');
    el.setAttribute('lname', 'Meyer');
    assert.equal(el.lname, 'Meyer', 'We have set the property from the attribute');
  });
  QUnit.test("properties are not set when attribute does not exist", function (assert) {
    var BasicBindingsElement =
    /*#__PURE__*/
    function (_StacheElement2) {
      _inherits(BasicBindingsElement, _StacheElement2);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(BasicBindingsElement).apply(this, arguments));
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{name}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.maybeConvert(String),
              bind: fromAttribute,
              set: function set(v) {
                return v;
              }
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("no-attribute", BasicBindingsElement);
    var el = document.createElement('no-attribute');
    fixture.appendChild(el);
    assert.strictEqual(el.getAttribute('name'), null, 'We have not initialized the attribute');
    assert.strictEqual(el.name, undefined, 'We have not initialized the property');
  });
  QUnit.test("property is not called multiple times", function (assert) {
    var setCounter = 0;

    var BasicBindingsElement =
    /*#__PURE__*/
    function (_StacheElement3) {
      _inherits(BasicBindingsElement, _StacheElement3);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(BasicBindingsElement).apply(this, arguments));
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "<h1>{{name}}</h1>";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.maybeConvert(String),
              bind: fromAttribute,
              set: function set(newVal) {
                setCounter++;
                return newVal;
              }
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("setter-multiple-check", BasicBindingsElement);
    var el = document.createElement('setter-multiple-check'); // call setAttribute _before_ appendChild to simulate something like
    // <setter-multiple-check name="Kevin" />
    // being in the page before customElements.define is called

    el.setAttribute('name', 'Kevin');
    fixture.appendChild(el);
    assert.strictEqual(el.getAttribute('name'), 'Kevin', 'We have the attribute');
    assert.strictEqual(el.name, 'Kevin', 'We have initialized the property');
    assert.strictEqual(setCounter, 1, 'We have only called the setter once');
  });
  QUnit.test("camelCase propName", function (assert) {
    var BasicBindingsElement =
    /*#__PURE__*/
    function (_StacheElement4) {
      _inherits(BasicBindingsElement, _StacheElement4);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(BasicBindingsElement).apply(this, arguments));
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            firstName: {
              type: type.convert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("camel-case", BasicBindingsElement);
    var el = document.createElement('camel-case');
    fixture.appendChild(el);
    el.setAttribute('first-name', 'Kevin');
    assert.equal(el.firstName, 'Kevin', 'We have the correct property value');
  });
  dev.devOnlyTest("check graph whatchangesme works", function (assert) {
    var BasicBindingsElement =
    /*#__PURE__*/
    function (_StacheElement5) {
      _inherits(BasicBindingsElement, _StacheElement5);

      function BasicBindingsElement() {
        _classCallCheck(this, BasicBindingsElement);

        return _possibleConstructorReturn(this, _getPrototypeOf(BasicBindingsElement).apply(this, arguments));
      }

      _createClass(BasicBindingsElement, null, [{
        key: "view",
        get: function get() {
          return "";
        }
      }, {
        key: "props",
        get: function get() {
          return {
            name: {
              type: type.convert(String),
              bind: fromAttribute
            }
          };
        }
      }]);

      return BasicBindingsElement;
    }(StacheElement);

    customElements.define("what-changes-me", BasicBindingsElement);
    var el = document.createElement('what-changes-me');
    fixture.appendChild(el);
    var propDeps = canReflectDeps.getDependencyDataOf(el, "name").whatChangesMe.mutate.valueDependencies;
    assert.equal(propDeps.size, 1, 'We have the graph data');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = propDeps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var dep = _step.value;
        assert.equal(dep[Symbol.for('can.getName')](), 'Observation<FromAttribute<what-changes-me.name>>', 'We have the correct graph dep');
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
}